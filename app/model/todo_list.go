/*
 * Simple To Do API
 *
 * This is a simple API for managing a TO DO List
 *
 * API version: 1.0.0
 * Originally Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package model

import (
	"errors"
	"fmt"
	"litesoftToDo/utils/uuid"
	"litesoftToDo/utils/validate"
)

type TodoList struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description,omitempty"`

	Tasks []*Task `json:"tasks,omitempty"`
}

func (this *TodoList) Init() {
	if this != nil {
		this.Tasks = []*Task{}
	}
}

func (this *TodoList) Validate() (err error) {
	if this == nil {
		return errors.New("can't Validate nil List")
	}
	err = validate.NoWhiteSpace("list ID", this.Id)
	if err == nil {
		err = validate.RequiredAndNoLeadingNorMultipleInnerWhiteSpace("list Name", this.Name)
		if err == nil {
			err = validate.NoLeadingNorMultipleInnerWhiteSpace("list Description", this.Description)
			if err == nil {
				for i, zTask := range this.Tasks {
					err = zTask.Validate()
					if err != nil {
						return fmt.Errorf("task[%d]: %v", i, zTask)
					}
				}
			}
		}
	}
	return err
}

/*
 * Return a reference (Nil if not found) to a Task if this List has it
 */
func (this *TodoList) GetTask(pID string) (rFound *Task) {
	if this != nil {
		for _, zTask := range this.Tasks {
			if zTask.Id == pID {
				return zTask
			}
		}
	}
	return
}

func (this *TodoList) EnsureId(pUUIDsource uuid.UUIDsource) (rListId string, err error) {
	if len(this.Id) == 0 {
		this.Id, err = pUUIDsource()
	}
	rListId = this.Id
	return
}

func (this *TodoList) EnsureTaskIds(pUUIDsource uuid.UUIDsource) (rTaskIds []string, err error) {
	rTaskIds = []string{}
	zTaskId := ""
	for _, zTask := range this.Tasks {
		zTaskId, err = zTask.EnsureId(pUUIDsource)
		if err != nil {
			return
		}
		rTaskIds = append(rTaskIds, zTaskId)
	}
	return
}

func (this *TodoList) AddTask(pTask *Task) {
	this.Tasks = append(this.Tasks, pTask)
}

func (this TodoList) Clone() *TodoList { // Note, lack of star on "this" reference cause the struct to be copied
	return &this
}

